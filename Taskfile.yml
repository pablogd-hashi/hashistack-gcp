version: '3'

vars:
  DC1_DIR: clusters/dc1/terraform
  DC2_DIR: clusters/dc2/terraform
  GKE_WEST_DIR: clusters/gke-europe-west1/terraform
  GKE_SW_DIR: clusters/gke-southwest/terraform

tasks:
  # === Image Building (First Step) ===

  build-images:
    desc: "Build HashiStack images with Packer (REQUIRED FIRST STEP)"
    dir: "packer/gcp"
    cmds:
      - echo "🔨 Building HashiStack images for new project..."
      - packer build .
      - echo "✅ HashiStack images built successfully"

  # === Core Infrastructure Deployment ===
  
  deploy-dc1:
    desc: "Deploy DC1 cluster (europe-southwest1)"
    dir: "{{.DC1_DIR}}"
    cmds:
      - echo "🚀 Deploying DC1 cluster..."
      - terraform init
      - terraform apply -auto-approve
      - echo "✅ DC1 cluster deployed successfully"
      - task: show-dc1-info

  deploy-dc2:
    desc: "Deploy DC2 cluster (europe-west1)"
    dir: "{{.DC2_DIR}}"
    cmds:
      - echo "🚀 Deploying DC2 cluster..."
      - terraform init
      - terraform apply -auto-approve
      - echo "✅ DC2 cluster deployed successfully"
      - task: show-dc2-info

  deploy-gke-west:
    desc: "Deploy GKE cluster (europe-west1)"
    dir: "{{.GKE_WEST_DIR}}"
    cmds:
      - echo "🚀 Deploying GKE Europe West1 cluster..."
      - terraform init
      - terraform apply -auto-approve
      - echo "✅ GKE Europe West1 cluster deployed successfully"

  deploy-gke-southwest:
    desc: "Deploy GKE cluster (europe-southwest1)"
    dir: "{{.GKE_SW_DIR}}"
    cmds:
      - echo "🚀 Deploying GKE Southwest cluster..."
      - terraform init
      - terraform apply -auto-approve
      - echo "✅ GKE Southwest cluster deployed successfully"

  # === Combined Deployments ===

  deploy-both-dc:
    desc: "Deploy both DC1 and DC2 clusters"
    cmds:
      - task: deploy-dc1
      - task: deploy-dc2
      - echo "🎉 Both DC clusters deployed successfully"
      - task: show-all-urls

  deploy-both-gke:
    desc: "Deploy both GKE clusters"
    cmds:
      - task: deploy-gke-west
      - task: deploy-gke-southwest
      - echo "🎉 Both GKE clusters deployed successfully"

  deploy-all:
    desc: "Deploy all clusters (DC1, DC2, GKE West, GKE Southwest)"
    cmds:
      - task: deploy-both-dc
      - task: deploy-both-gke
      - echo "🎉 All clusters deployed successfully"

  # === Post-Deployment Configuration ===

  eval-dc1:
    desc: "Get environment variables for DC1 cluster"
    dir: "{{.DC1_DIR}}"
    cmds:
      - echo "# DC1 Environment Variables - copy and paste these into your shell:"
      - echo ""
      - terraform output -json environment_setup | jq -r .bash_export

  eval-dc2:
    desc: "Get environment variables for DC2 cluster"
    dir: "{{.DC2_DIR}}"
    cmds:
      - echo "# DC2 Environment Variables - copy and paste these into your shell:"
      - echo ""
      - terraform output -json environment_setup | jq -r .bash_export

  eval-both:
    desc: "Get environment variables for both DC clusters"
    cmds:
      - echo "# ==> DC1 Environment Variables:"
      - task: eval-dc1
      - echo ""
      - echo "# ==> DC2 Environment Variables:"
      - task: eval-dc2

  gke-auth-west:
    desc: "Authenticate to GKE Europe West cluster"
    dir: "{{.GKE_WEST_DIR}}"
    cmds:
      - echo "🔐 Authenticating to GKE Europe West cluster..."
      - terraform output -raw gke_auth_command | bash
      - echo "✅ GKE Europe West context configured"

  gke-auth-southwest:
    desc: "Authenticate to GKE Southwest cluster"
    dir: "{{.GKE_SW_DIR}}"
    cmds:
      - echo "🔐 Authenticating to GKE Southwest cluster..."
      - terraform output -raw gke_auth_command | bash
      - echo "✅ GKE Southwest context configured"

  setup-consul-nomad-dc1:
    desc: "Configure Nomad-Consul integration on DC1 (REQUIRED after DC deployment)"
    cmds:
      - echo "⚙️  Configuring Nomad-Consul integration on DC1..."
      - echo "Run this command on DC1 server - nomad setup consul -y"
      - echo "Use - task ssh-dc1-server"

  setup-consul-nomad-dc2:
    desc: "Configure Nomad-Consul integration on DC2 (REQUIRED after DC deployment)"
    cmds:
      - echo "⚙️  Configuring Nomad-Consul integration on DC2..."
      - echo "Run this command on DC2 server - nomad setup consul -y"
      - echo "Use - task ssh-dc2-server"

  setup-consul-nomad-both:
    desc: "Configure Nomad-Consul integration on both DC clusters"
    cmds:
      - task: setup-consul-nomad-dc1
      - task: setup-consul-nomad-dc2

  # === Application Deployment ===

  deploy-traefik-dc1:
    desc: "Deploy Traefik load balancer on DC1"
    cmds:
      - echo "🔀 Deploying Traefik on DC1..."
      - echo "⚠️  Ensure environment variables are set - task eval-dc1"
      - nomad run -var datacenter=gcp-dc1 nomad-apps/monitoring/traefik.hcl
      - echo "✅ Traefik deployed to DC1"

  deploy-traefik-dc2:
    desc: "Deploy Traefik load balancer on DC2"
    cmds:
      - echo "🔀 Deploying Traefik on DC2..."
      - echo "⚠️  Ensure environment variables are set - task eval-dc2"
      - nomad run -var datacenter=gcp-dc2 nomad-apps/monitoring/traefik.hcl
      - echo "✅ Traefik deployed to DC2"

  deploy-monitoring-dc1:
    desc: "Deploy monitoring stack (Prometheus + Grafana) on DC1"
    cmds:
      - echo "📊 Deploying monitoring stack on DC1..."
      - echo "⚠️  Ensure environment variables are set - task eval-dc1"
      - task: deploy-traefik-dc1
      - echo "🔍 Deploying Prometheus..."
      - nomad run -var datacenter=gcp-dc1 nomad-apps/monitoring/prometheus.hcl
      - echo "📈 Deploying Grafana..."
      - nomad run -var datacenter=gcp-dc1 nomad-apps/monitoring/grafana.hcl
      - echo "✅ Complete monitoring stack deployed to DC1"

  deploy-monitoring-dc2:
    desc: "Deploy monitoring stack (Prometheus + Grafana) on DC2"
    cmds:
      - echo "📊 Deploying monitoring stack on DC2..."
      - echo "⚠️  Ensure environment variables are set - task eval-dc2"
      - task: deploy-traefik-dc2
      - echo "🔍 Deploying Prometheus..."
      - nomad run -var datacenter=gcp-dc2 nomad-apps/monitoring/prometheus.hcl
      - echo "📈 Deploying Grafana..."
      - nomad run -var datacenter=gcp-dc2 nomad-apps/monitoring/grafana.hcl
      - echo "✅ Complete monitoring stack deployed to DC2"

  deploy-monitoring-both:
    desc: "Deploy monitoring stack on both DC1 and DC2"
    cmds:
      - echo "📊 Deploying monitoring stack on both clusters..."
      - task: deploy-monitoring-dc1
      - task: deploy-monitoring-dc2
      - echo "🎉 Monitoring stack deployed on both DC1 and DC2"

  # === Information and Status ===

  show-dc1-info:
    desc: "Show DC1 cluster information"
    dir: "{{.DC1_DIR}}"
    cmds:
      - echo "=== DC1 Cluster Info ==="
      - terraform output cluster_info 2>/dev/null || echo "❌ DC1 not deployed"
      - echo "=== DC1 URLs ==="
      - terraform output hashistack_urls 2>/dev/null || echo "❌ DC1 URLs not available"

  show-dc2-info:
    desc: "Show DC2 cluster information"
    dir: "{{.DC2_DIR}}"
    cmds:
      - echo "=== DC2 Cluster Info ==="
      - terraform output cluster_info 2>/dev/null || echo "❌ DC2 not deployed"
      - echo "=== DC2 URLs ==="
      - terraform output hashistack_urls 2>/dev/null || echo "❌ DC2 URLs not available"

  show-all-urls:
    desc: "Show all cluster URLs and access information"
    cmds:
      - echo "🌐 === ALL CLUSTER ACCESS INFORMATION ==="
      - task: show-dc1-info
      - task: show-dc2-info
      - echo ""
      - echo "📋 Next steps -"
      - echo "1. Setup environment variables - task eval-both"
      - echo "2. Configure Nomad-Consul integration - task setup-consul-nomad-both"
      - echo "3. Authenticate to Nomad UI - nomad ui -authenticate"
      - echo "4. For cluster peering - task -t tasks/peering.yml help"
      - echo "5. For admin partitions - task -t tasks/admin-partitions.yml help"
      - echo "6. For boundary integration - task -t tasks/boundary.yml help"

  get-all-ips:
    desc: "Get all server and client IPs from all clusters"
    cmds:
      - echo "🖥️  === ALL CLUSTER IPS ==="
      - echo "=== DC1 IPs ==="
      - cd {{.DC1_DIR}} && terraform output server_ips 2>/dev/null || echo "❌ DC1 not deployed"
      - cd {{.DC1_DIR}} && terraform output client_ips 2>/dev/null || echo "❌ DC1 not deployed"
      - echo ""
      - echo "=== DC2 IPs ==="
      - cd {{.DC2_DIR}} && terraform output server_ips 2>/dev/null || echo "❌ DC2 not deployed"
      - cd {{.DC2_DIR}} && terraform output client_ips 2>/dev/null || echo "❌ DC2 not deployed"

  # === SSH Access ===

  ssh-dc1-server:
    desc: "SSH to DC1 server node"
    dir: "{{.DC1_DIR}}"
    cmds:
      - terraform output -raw ssh_dc1_server | bash

  ssh-dc2-server:
    desc: "SSH to DC2 server node"  
    dir: "{{.DC2_DIR}}"
    cmds:
      - terraform output -raw ssh_dc2_server | bash

  # === Cleanup ===

  destroy-dc1:
    desc: "Destroy DC1 cluster"
    dir: "{{.DC1_DIR}}"
    cmds:
      - echo "🗑️  Destroying DC1 cluster..."
      - terraform destroy -auto-approve

  destroy-dc2:
    desc: "Destroy DC2 cluster"
    dir: "{{.DC2_DIR}}"
    cmds:
      - echo "🗑️  Destroying DC2 cluster..."
      - terraform destroy -auto-approve

  destroy-gke-west:
    desc: "Destroy GKE Europe West1 cluster"
    dir: "{{.GKE_WEST_DIR}}"
    cmds:
      - echo "🗑️  Destroying GKE Europe West1 cluster..."
      - terraform destroy -auto-approve

  destroy-gke-southwest:
    desc: "Destroy GKE Southwest cluster"
    dir: "{{.GKE_SW_DIR}}"
    cmds:
      - echo "🗑️  Destroying GKE Southwest cluster..."
      - terraform destroy -auto-approve

  destroy-both-dc:
    desc: "Destroy both DC clusters"
    cmds:
      - task: destroy-dc1
      - task: destroy-dc2

  destroy-both-gke:
    desc: "Destroy both GKE clusters"
    cmds:
      - task: destroy-gke-west
      - task: destroy-gke-southwest

  destroy-all:
    desc: "Destroy all clusters"
    cmds:
      - task: destroy-both-dc
      - task: destroy-both-gke
      - echo "🗑️  All clusters destroyed"

  # === Help and Status ===

  status:
    desc: "Show status of all clusters"
    cmds:
      - echo "📊 === CLUSTER STATUS ==="
      - task: show-all-urls
      - task: get-all-ips
      - echo ""
      - echo "⚠️  IMPORTANT - Setup environment variables first - task eval-both"
      - echo ""
      - echo "📋 Available feature modules -"
      - echo "- Cluster Peering - task -t tasks/peering.yml help"
      - echo "- Admin Partitions - task -t tasks/admin-partitions.yml help"  
      - echo "- Boundary Integration - task -t tasks/boundary.yml help"
      - echo "- Automated Boundary - task -t tasks/boundary-auto.yml help"
      - echo "- CTS Integration - task -t tasks/cts.yml help"

  help:
    desc: "Show available tasks and getting started guide"
    cmds:
      - echo "🚀 === HASHISTACK GCP DEPLOYMENT ==="
      - echo ""
      - echo "📋 CORE INFRASTRUCTURE TASKS -"
      - echo "  build-images           - Build HashiStack images (REQUIRED FIRST)"
      - echo "  deploy-dc1            - Deploy DC1 cluster (europe-southwest1)"
      - echo "  deploy-dc2            - Deploy DC2 cluster (europe-west1)"
      - echo "  deploy-gke-west       - Deploy GKE Europe West1 cluster"
      - echo "  deploy-gke-southwest  - Deploy GKE Southwest cluster"
      - echo "  deploy-both-dc        - Deploy both DC clusters"
      - echo "  deploy-both-gke       - Deploy both GKE clusters"
      - echo "  deploy-all            - Deploy all clusters"
      - echo ""
      - echo "🔧 POST-DEPLOYMENT -"
      - echo "  eval-dc1                - Get DC1 environment variables"
      - echo "  eval-dc2                - Get DC2 environment variables"
      - echo "  eval-both               - Get both DC environment variables"
      - echo "  gke-auth-west           - Authenticate to GKE Europe West cluster"
      - echo "  gke-auth-southwest      - Authenticate to GKE Southwest cluster"
      - echo "  setup-consul-nomad-both - Configure Nomad-Consul integration (REQUIRED)"
      - echo ""
      - echo "🚀 APPLICATION DEPLOYMENT -"
      - echo "  deploy-traefik-dc1      - Deploy Traefik load balancer on DC1"
      - echo "  deploy-traefik-dc2      - Deploy Traefik load balancer on DC2"
      - echo "  deploy-monitoring-dc1   - Deploy monitoring stack on DC1"
      - echo "  deploy-monitoring-dc2   - Deploy monitoring stack on DC2"
      - echo "  deploy-monitoring-both  - Deploy monitoring on both clusters"
      - echo ""
      - echo "📊 INFORMATION -"
      - echo "  show-all-urls         - Show all cluster URLs and access info"
      - echo "  get-all-ips          - Get all server and client IPs"
      - echo "  status               - Show complete cluster status"
      - echo ""
      - echo "🔌 SSH ACCESS -"
      - echo "  ssh-dc1-server       - SSH to DC1 server"
      - echo "  ssh-dc2-server       - SSH to DC2 server"
      - echo ""
      - echo "🗑️  CLEANUP -"
      - echo "  destroy-dc1          - Destroy DC1 cluster"
      - echo "  destroy-dc2          - Destroy DC2 cluster"
      - echo "  destroy-both-dc      - Destroy both DC clusters"
      - echo "  destroy-all          - Destroy all clusters"
      - echo ""
      - echo "🔧 FEATURE MODULES -"
      - echo "  task -t tasks/peering.yml help           - Cluster peering setup"
      - echo "  task -t tasks/admin-partitions.yml help  - Admin partitions setup"
      - echo "  task -t tasks/boundary.yml help          - Boundary integration"
      - echo "  task -t tasks/boundary-auto.yml help     - Automated Boundary deployment"
      - echo "  task -t tasks/cts.yml help               - Consul Terraform Sync"
      - echo ""
      - echo "📖 QUICK START -"
      - echo "  1. task build-images"
      - echo "  2. task deploy-both-dc"
      - echo "  3. task eval-both (copy env vars to your shell)"
      - echo "  4. task setup-consul-nomad-both"
      - echo "  5. task deploy-monitoring-both (optional)"
      - echo "  6. nomad ui -authenticate (for UI access)"
      - echo "  7. task show-all-urls"

  default:
    desc: "Show help by default"
    cmds:
      - task: help