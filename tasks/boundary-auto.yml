version: '3'

vars:
  BOUNDARY_DIR: ../boundary/terraform
  DC1_DIR: ../clusters/dc1/terraform
  DC2_DIR: ../clusters/dc2/terraform

tasks:
  help:
    desc: "Show automated Boundary deployment and management guide"
    cmds:
      - echo " === AUTOMATED BOUNDARY DEPLOYMENT ==="
      - echo ""
      - echo "Fully automated Boundary setup with target discovery and credential injection"
      - echo ""
      - echo " PREREQUISITES -"
      - echo "   DC1 and/or DC2 clusters deployed"
      - echo "   Environment variables configured - task eval-both"
      - echo "   HCP Boundary cluster running"
      - echo "   SSH public key configured in Terraform workspace variables"
      - echo ""
      - echo " DOCUMENTATION - boundary/README.md"
      - echo ""
      - echo " AUTOMATED DEPLOYMENT -"
      - echo "  boundary:setup-full        - Complete automated setup (recommended)"
      - echo "  boundary:discover-targets  - Auto-discover infrastructure targets"
      - echo "  boundary:inject-credentials - Auto-inject SSH credentials"
      - echo "  boundary:deploy-complete   - Deploy with full automation"
      - echo ""
      - echo " MANAGEMENT -"
      - echo "  boundary:list-all-targets  - List all discovered targets"
      - echo "  boundary:test-all-connections - Test SSH to all targets"
      - echo "  boundary:update-discovery  - Refresh target discovery"
      - echo "  boundary:status-full       - Complete deployment status"
      - echo ""
      - echo " CONNECTION HELPERS -"
      - echo "  boundary:connect-dc1-server  - Quick connect to DC1 server"
      - echo "  boundary:connect-dc2-server  - Quick connect to DC2 server"
      - echo "  boundary:connect-dc1-client  - Quick connect to DC1 client"
      - echo "  boundary:connect-dc2-client  - Quick connect to DC2 client"
      - echo ""
      - echo "  CLEANUP -"
      - echo "  boundary:cleanup-all       - Remove all Boundary resources"
      - echo ""
      - echo " QUICK START -"
      - echo "  task -t tasks/boundary:auto.yml boundary:setup-full"

  boundary:discover-targets:
    desc: "Auto-discover all infrastructure targets"
    cmds:
      - echo " Discovering infrastructure targets..."
      - echo ""
      - echo "=== DC1 Servers ==="
      - cd {{.DC1_DIR}} && terraform output -json server_nodes 2>/dev/null || echo " DC1 not deployed"
      - echo ""
      - echo "=== DC1 Clients ==="
      - cd {{.DC1_DIR}} && terraform output -json client_nodes 2>/dev/null || echo " DC1 clients not available"
      - echo ""
      - echo "=== DC2 Servers ==="
      - cd {{.DC2_DIR}} && terraform output -json server_nodes 2>/dev/null || echo " DC2 not deployed"
      - echo ""
      - echo "=== DC2 Clients ==="
      - cd {{.DC2_DIR}} && terraform output -json client_nodes 2>/dev/null || echo " DC2 clients not available"
      - echo ""
      - echo "  Target discovery completed. Use deploy-complete to create Boundary targets."

  boundary:inject-credentials:
    desc: "Auto-inject SSH credentials for all targets"
    dir: "{{.BOUNDARY_DIR}}"
    cmds:
      - echo " Auto-injecting SSH credentials..."
      - echo ""
      - echo "Credential injection will be handled by Terraform using workspace variables -"
      - echo "- ssh_public_key (from Terraform workspace)"
      - echo "- ssh_private_key (from Terraform workspace)"
      - echo "- ssh_username (default - ubuntu)"
      - echo ""
      - echo " Credentials configured for automatic injection"

  boundary:deploy-complete:
    desc: "Deploy Boundary with full automation"
    dir: "{{.BOUNDARY_DIR}}"
    cmds:
      - echo " Deploying Boundary with full automation..."
      - echo ""
      - echo "This will -"
      - echo "1. Auto-discover all infrastructure targets (servers + clients)"
      - echo "2. Create Boundary host catalogs for DC1 and DC2"
      - echo "3. Create host sets for servers and clients"
      - echo "4. Create targets with SSH credential injection"
      - echo "5. Configure credential stores with SSH keys"
      - echo ""
      - terraform init
      - terraform plan
      - echo ""
      - echo "Applying Boundary configuration..."
      - terraform apply -auto-approve
      - echo ""
      - echo " Boundary deployment completed with full automation"
      - task: boundary:status-full

  boundary:setup-full:
    desc: "Complete automated Boundary setup (recommended)"
    cmds:
      - echo " Starting complete automated Boundary setup..."
      - echo ""
      - task: boundary:discover-targets
      - task: boundary:inject-credentials
      - task: boundary:deploy-complete
      - echo ""
      - echo " Automated Boundary setup completed!"
      - echo ""
      - echo "Next steps -"
      - echo "1. Authenticate - boundary authenticate password -auth-method-id <auth-method>"
      - echo "2. List targets - task -t tasks/boundary:auto.yml boundary:list-all-targets"
      - echo "3. Test connections - task -t tasks/boundary:auto.yml boundary:test-all-connections"

  boundary:list-all-targets:
    desc: "List all discovered and configured targets"
    dir: "{{.BOUNDARY_DIR}}"
    cmds:
      - echo " All Boundary Targets -"
      - echo ""
      - echo "=== DC1 Targets ==="
      - terraform output -json boundary_targets 2>/dev/null | jq -r 'to_entries[] | select(.key | contains("dc1")) | "\\(.key) - \\(.value.id) (\\(.value.type) port \\(.value.port))"' 2>/dev/null || echo " No DC1 targets configured"
      - echo ""
      - echo "=== DC2 Targets ==="
      - terraform output -json boundary_targets 2>/dev/null | jq -r 'to_entries[] | select(.key | contains("dc2")) | "\\(.key) - \\(.value.id) (\\(.value.type) port \\(.value.port))"' 2>/dev/null || echo " No DC2 targets configured"
      - echo ""
      - echo "=== Connection Commands ==="
      - terraform output connection_commands 2>/dev/null || echo " Connection commands not available"

  boundary:test-all-connections:
    desc: "Test SSH connections to all targets"
    dir: "{{.BOUNDARY_DIR}}"
    cmds:
      - echo " Testing all Boundary SSH connections..."
      - echo ""
      - echo "Available targets for testing -"
      - terraform output -json boundary_targets 2>/dev/null | jq -r 'to_entries[] | "Target - \\(.key)\\nID - \\(.value.id)\\nCommand - boundary connect ssh -target-id \\(.value.id)\\n"' || echo " No targets available for testing"
      - echo ""
      - echo "To test a specific target -"
      - echo "boundary connect ssh -target-id <target-id-from-above>"
      - echo ""
      - echo "To test all targets automatically, run each command above."

  boundary:connect-dc1-server:
    desc: "Quick connect to DC1 server via Boundary"
    dir: "{{.BOUNDARY_DIR}}"
    cmds:
      - echo " Connecting to DC1 server via Boundary..."
      - terraform output -json boundary_targets 2>/dev/null | jq -r 'to_entries[] | select(.key | contains("dc1") and contains("server")) | "boundary connect ssh -target-id \\(.value.id)"' | head -1 || echo " No DC1 server targets available"

  boundary:connect-dc2-server:
    desc: "Quick connect to DC2 server via Boundary"
    dir: "{{.BOUNDARY_DIR}}"
    cmds:
      - echo " Connecting to DC2 server via Boundary..."
      - terraform output -json boundary_targets 2>/dev/null | jq -r 'to_entries[] | select(.key | contains("dc2") and contains("server")) | "boundary connect ssh -target-id \\(.value.id)"' | head -1 || echo " No DC2 server targets available"

  boundary:connect-dc1-client:
    desc: "Quick connect to DC1 client via Boundary"
    dir: "{{.BOUNDARY_DIR}}"
    cmds:
      - echo " Connecting to DC1 client via Boundary..."
      - terraform output -json boundary_targets 2>/dev/null | jq -r 'to_entries[] | select(.key | contains("dc1") and contains("client")) | "boundary connect ssh -target-id \\(.value.id)"' | head -1 || echo " No DC1 client targets available"

  boundary:connect-dc2-client:
    desc: "Quick connect to DC2 client via Boundary"
    dir: "{{.BOUNDARY_DIR}}"
    cmds:
      - echo " Connecting to DC2 client via Boundary..."
      - terraform output -json boundary_targets 2>/dev/null | jq -r 'to_entries[] | select(.key | contains("dc2") and contains("client")) | "boundary connect ssh -target-id \\(.value.id)"' | head -1 || echo " No DC2 client targets available"

  boundary:update-discovery:
    desc: "Refresh target discovery and update Boundary"
    dir: "{{.BOUNDARY_DIR}}"
    cmds:
      - echo " Refreshing target discovery..."
      - task: boundary:discover-targets
      - echo ""
      - echo "Updating Boundary configuration..."
      - terraform apply -auto-approve
      - echo " Target discovery updated"

  boundary:status-full:
    desc: "Complete deployment status with all details"
    dir: "{{.BOUNDARY_DIR}}"
    cmds:
      - echo " Complete Boundary Deployment Status -"
      - echo ""
      - echo "=== Boundary Cluster ==="
      - terraform output boundary_cluster_url 2>/dev/null || echo " Boundary cluster not configured"
      - echo ""
      - echo "=== Infrastructure Discovery ==="
      - terraform output discovered_infrastructure 2>/dev/null || echo " No infrastructure discovered"
      - echo ""
      - echo "=== Host Catalogs ==="
      - terraform output -json host_catalogs 2>/dev/null | jq -r 'to_entries[] | "\\(.key) - \\(.value)"' || echo " No host catalogs configured"
      - echo ""
      - echo "=== Credential Stores ==="
      - terraform output -json credential_stores 2>/dev/null | jq -r 'to_entries[] | "\\(.key) - \\(.value)"' || echo " No credential stores configured"
      - echo ""
      - echo "=== Active Targets ==="
      - terraform output -json boundary_targets 2>/dev/null | jq -r 'to_entries[] | "\\(.key) - \\(.value.id) [\\(.value.type) port \\(.value.port)]"' || echo " No targets configured"
      - echo ""
      - echo "=== Quick Connection Commands ==="
      - terraform output connection_commands 2>/dev/null || echo " Connection commands not available"

  boundary:cleanup-all:
    desc: "Remove all Boundary resources"
    dir: "{{.BOUNDARY_DIR}}"
    cmds:
      - echo "  Cleaning up all Boundary resources..."
      - echo ""
      - echo "This will remove -"
      - echo "- All Boundary targets"
      - echo "- All host catalogs and host sets"
      - echo "- All credential stores and credentials"
      - echo "- All Boundary configuration"
      - echo ""
      - echo "  This action cannot be undone!"
      - echo "Continue? (Ctrl+C to cancel, Enter to proceed)"
      - read confirm
      - terraform destroy -auto-approve
      - echo " All Boundary resources removed"

  default:
    desc: "Show help by default"
    cmds:
      - task: help